// Load the full build.
import _ from 'lodash';

var deck = [];
var CardsFolders = ["Clubs", "Diamonds", "Hearts", "Spades"]; //C=Clubs  D=Diamonds H=Hearts S=Spades
var cardWeights = [
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "J",
  "Q",
  "K",
  "A"
];

(function getDeck() {

  for (let y of CardsFolders) {
    for (let x of cardWeights) {
      var card = {
        Value: x,
        Suit: y
      };
      deck.push(card);
    }
  }
  deck = _.shuffle(deck);
  return deck;
}());

//console.log(deck);
function getCards() {
  var usr_cards = [];
  for (let i = 0; i <= 4; i++) {
    usr_cards.push(deck[i]);
    deck = _.pull(deck, deck[i]);
  }
  //console.log(deck.length+"\n -- NEW USER -- \n");

  usr_cards = _.sortBy(usr_cards, function(obj) {
    return _.indexOf(cardWeights, obj.Value);
  });
  //  console.log(usr_cards);
  return usr_cards;
}

function Player(name) {
  this.name = name;
  this.cards = getCards();
  this.ranktype = this.handsCheck();
  this.pot = "120";
}

Player.prototype.flush_check = function() {
  var flag = true;
  /////obj to Array

  const array = Array.from(this.cards);
  var temp = array[0].Suit;
  //  console.log(temp);

  for (const el of array) {
    if (!flag)
      return flag;

    (temp == el.Suit)
      ? flag = true
      : flag = false;
  }
  return flag;

}

Player.prototype.royal_flush = function() {
  var royal = ['10', 'J', 'Q', 'K', 'A'];
  var flag = true;

  for (var i = this.cards.length - 1; i >= 0; i--) {

    if (flag == false) {
      //  console.log("No Royal,Sorry!");
      return false;
    }

    flag = false;
    for (var j = this.length - 1; j >= 0; j--) {

      if (this.cards[j].Value == royal[i]) {
        flag = true;
      }

    }
  }
  if (flag) {
    //  console.log("ROYAL");
    return true;
  }

}

Player.prototype.straightCheck = function() {

  var index = _.indexOf(cardWeights, this.cards[0].Value);
  var Straightflag = true;

  for (var i = 0; i < this.cards.length; i++) {
    if (this.cards[i].Value != cardWeights[index]) {
      Straightflag = false;
      //console.log("no Straight");
      return Straightflag;
    }
    index++;
    //console.log(index);
  }
  if (Straightflag)
    return true;
  }

Player.prototype.straight_flush_Check = function() {

  var numSuit = _.uniqBy(this.cards, function(x) {
    return x.Suit;
  });
  //  console.log(numSuit);
  var index = _.indexOf(cardWeights, this.cards[0].Value);
  var Straightflag = true;

  for (var i = 0; i < this.cards.length; i++) {
    if (this.cards[i].Value != cardWeights[index]) {
      Straightflag = false;
      //console.log("no Straight");
      return Straightflag;
    }
    index++;
    //console.log(index);
  }
  if ((Straightflag) && (numSuit.length == 5)) {
    return Straightflag;
  }

}

Player.prototype.pairsCheck = function() {
  ///inserting count property in the object
  var filteredArray = this.cards;
  for (var i = 0; i < filteredArray.length; i++) {
    filteredArray[i].cnt = 0;
  }

  for (var j = 0; j < filteredArray.length; j++) {
    for (var i = 0; i < filteredArray.length; i++) {
      if (filteredArray[j].Value == filteredArray[i].Value)
        filteredArray[j].cnt = filteredArray[j].cnt + 1;

      }

  }

  filteredArray = _.uniqBy(filteredArray, function(x) {
    return x.Value;
  })

  this.cards = filteredArray;
  //console.log(filteredArray);
  //  console.log(this.cards);

  var max = _.maxBy(this.cards, function(o) {
    return o.cnt;
  });
  //console.log(max);

  var msg = "";
  if (this.cards.length == 4) {
    //console.log("exo 1 pair");
    msg = "1 pair of " + max.Value + " ";
    return msg;
  }
  if (this.cards.length == 3 && max.cnt == 2) {
    msg = "2 pairs ";
    return msg;
  }
  if (this.cards.length == 3 && max.cnt == 3) {
    //console.log("three of a kind");
    msg = "3 of a kind of " + max.Value + " ";
    return msg;
  }
  if (this.cards.length == 2 && max.cnt == 3) {
    //console.log("Full House");
    msg = "Full House of " + max.Value + " ";
    return msg;
  }
  if (this.cards.length == 2 && max.cnt == 4) {
    //console.log("four of kind");
    msg = "four of kind of " + max.Value + " ";
    return msg;
  } else
    return false;

  }

Player.prototype.handsCheck = function() {
  var state = "";
  state = this.royal_flush();

  if (state == true)
    return "Royal flush";

  state = this.flush_check();

  if (state == true)
    return "Flush";

  state = this.straightCheck();

  if (state == true)
    return "Straight";

  state = this.straight_flush_Check();

  if (state == true)
    return "Straight flush_check";

  state = this.pairsCheck();

  if (state != false)
    return state;

else
    return "high cards";

  }

var plr1 = new Player("Mike");
//var plr2 = new Player("Nik");

console.log(plr1)
console.log(typeof plr1)
